// Generated by CoffeeScript 1.10.0
(function() {
  var currentScriptPath, ngGrid, scripts;

  scripts = document.getElementsByTagName("script");

  currentScriptPath = scripts[scripts.length - 1].src;

  ngGrid = angular.module('ngGrid', []);

  ngGrid.directive('ngGridField', function() {
    return {
      restrict: "E",
      require: '^ngGrid',
      link: function(scope, element, attrs, controller) {
        var grid;
        grid = controller.getGrid();
        return grid.addHeader(attrs);
      }
    };
  });

  ngGrid.directive('ngGrid', function(Grid) {
    return {
      templateUrl: currentScriptPath.replace('grid.js', 'table.html'),
      transclude: true,
      scope: {
        url: "=",
        edit: "="
      },
      controller: function($scope, $element, $attrs) {
        $scope.grid = new Grid({
          tableClass: $attrs.tableClass,
          url: $scope.url,
          edit: $scope.edit != null ? $scope.edit : $scope.edit = false
        });
        $scope.grid.getData();
        return this.getGrid = function() {
          return $scope.grid;
        };
      }
    };
  });

  ngGrid.service('Grid', function($http) {
    var $grid;
    return $grid = function(attrs) {
      return {
        editingRow: {},
        tableClass: attrs.tableClass,
        fields: [],
        url: attrs.url,
        edit: attrs.edit,
        rows: [],
        paginator: {
          page: 0,
          pages: 0
        },
        getData: function() {
          return $http.get(this.url).success((function(_this) {
            return function(response) {
              _this.rows = response.rows;
              _this.paginator.pages = response.total;
              _this.paginator.page = response.page;
              return _this.records = response.records;
            };
          })(this));
        },
        editRow: function(row) {
          return $http.get(this.edit);
        },
        setEditingRow: function(row) {
          return this.editingRow = row;
        },
        addHeader: function(header) {
          return this.fields.push({
            hidden: header.hidden != null,
            edit: header.edit != null,
            search: header.search != null,
            parameter: header.name,
            name: header.label
          });
        }
      };
    };
  });

}).call(this);
